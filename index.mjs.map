{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer' ;\nimport quantileGamma from '@stdlib/stats-base-dists-gamma-quantile' ;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2, 1.0 );\n* // returns ~2.994\n*\n* @example\n* var y = quantile( 0.5, 4, 2.0 );\n* // returns ~1.836\n*\n* @example\n* var y = quantile( 1.1, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 1, NaN );\n* // returns NaN\n*\n* @example\n* // Non-integer shape parameter:\n* var y = quantile( 0.5, 0.5, 1.0 );\n* // returns NaN\n*\n* @example\n* // Non-positive shape parameter:\n* var y = quantile( 0.5, -1, 1.0 );\n* // returns NaN\n*\n* @example\n* // Non-positive rate parameter:\n* var y = quantile( 0.5, 1, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn quantileGamma( p, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-quantile' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~3.357\n*\n* y = quantile( 0.8 );\n* // returns ~5.989\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-erlang-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-erlang-quantile' ;\n*\n* var y = quantile( 0.8, 1, 1.0 );\n* // returns ~1.609\n*\n* var myQuantile = quantile.factory( 10, 2.0 );\n* y = myQuantile( 0.4 );\n* // returns ~4.452\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["quantile","p","k","lambda","isNonNegativeInteger","quantileGamma","NaN","factory","factoryGamma","constantFunction","setReadOnly","main"],"mappings":";;waA+EA,SAASA,EAAUC,EAAGC,EAAGC,GACxB,OAAMC,EAAsBF,GAGrBG,EAAeJ,EAAGC,EAAGC,GAFpBG,GAGT,CCxCA,SAASC,EAASL,EAAGC,GACpB,OAAMC,EAAsBF,GAGrBM,EAAcN,EAAGC,GAFhBM,EAAkBH,IAG3B,CCJAI,EAAAC,EAAA,UAAAJ"}